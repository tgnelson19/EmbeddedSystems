;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Lab 2 Project Assembly Code
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.include "m328Pdef.inc"
.cseg
.org 0

	sbi   DDRB,1      ; PB1 is now output SER
	sbi   DDRB,2      ; PB2 is now output SRCLK
	sbi   DDRB,3      ; PB3 is now output RCLK
	cbi   DDRB,4      ; PB4 is now input BUTTON 1
	cbi   DDRB,5      ; PB5 is now input BUTTON 2

	sbi PINB,4 ; internal pullup resistor for PB4
	sbi PINB,5 ; internal pullup resistor for PB5

	ldi R19, 0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Settings Selector Loop
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
start:
	ldi R28, 0 ; STATE 0 (START)
	mov R19, R30
	rcall swapnums ; Turns what's in R19 into the binary for R16
	ldi R25, 0b00001000
	add R16, R25
	rcall display ; Displays R16 to 7seg
	mov R19, R31
	rcall swapnums ; Turns what's in R19 into the binary for R16
	rcall display ; Displays R16 to 7seg
	rcall delay_long
	
	rcall debouncestart ; Calls the debounce algorithem

rjmp start

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Main Function 1 loop
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

main:
	ldi R28, 1 ;STATE 1 (RUNNING FUNCTION 1)

	rcall function1Count

	;R30 is left display number, R31 is right display number
	mov R19, R30
	rcall swapnums ; Turns what's in R19 into the binary for R16
	ldi R25, 0b00001000
	add R16, R25
	rcall display ; Displays R16 to 7seg
	mov R19, R31
	rcall swapnums ; Turns what's in R19 into the binary for R16
	rcall display ; Displays R16 to 7seg

	rcall delay_long

	rcall debouncestart ; Calls the debounce algorithem
	
	rjmp main ;Go back to top of main


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Debouncing
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

debouncestart:	
	ldi R21, 0
	ldi R22, 0
	ldi R23, 0
	ldi R24, 0
	ldi R25, 5
	deloop: 
		SBIS PINB, 4 ; 
		inc R21 ;
		SBIC PINB, 4 ; 
		inc R22 ;
		SBIS PINB, 5 ; 
		inc R23 ;
		SBIC PINB, 5 ; 
		inc R24 ;

		dec R25
		brne  deloop

	cp R21, R22 ; Compares ones and zeros
	brpl buttonApressed ; Branch if positive

	cp R23, R24 ; Compares ones and zeros
	brpl buttonBpressed ; Branch if negative

	cp R21, R22 ; Compares ones and zeros
	brmi buttonAreleased ; Branch if positive

	cp R23, R24 ; Compares ones and zeros
	brmi buttonBreleased ; Branch if negative

	ret

buttonApressed:
	cpi R27, 0
	breq buttonAonetime
	ret

buttonAonetime:
	ldi R27, 1
	cpi R28, 0
	breq main
	cpi R28, 1
	breq start
	ret

buttonAreleased:
	ldi R27, 0
	ret

buttonBpressed:
	ldi R29, 1
	rcall buttonBonetime
	ret

buttonBreleased:
	cpi R29, 1
	
	ret

buttonBonetime:
	ldi R29, 0
	ldi R29, 0
	ldi R30, 0
	ldi R31, 0
	ldi R28, 0
	rjmp start
	ret

function1Count:

	inc R31
	cpi R31, 0x0A
	breq R31goesto0

	ret



R31goesto0: ; Sets R19 to zero when it reaches 10
	ldi R31, 0
	inc R30
	cpi R30, 0x0A
	breq R30goesto0
	ret

R30goesto0:
	ldi R28, 2
	timeoutloop:
		rcall debouncestart
		ldi R19, 99
		rcall swapnums
		ldi R25, 0b00001000
		add R16, R25
		rcall display
		sub R16, R25
		rcall display
		rcall delay_long
		rcall debouncestart
		rcall delay_long
		rcall debouncestart
		rcall delay_long
		rcall debouncestart
		rcall delay_long
		rcall debouncestart
		rcall delay_long
		rcall debouncestart
		rcall delay_long
		rcall debouncestart
		ldi R19, 9
		rcall swapnums
		ldi R25, 0b00001000
		add R16, R25
		rcall display
		sub R16, R25
		rcall display
		rcall delay_long
		rcall debouncestart
		rcall delay_long
		rcall debouncestart
		rcall delay_long
		rcall debouncestart
		rcall delay_long
		rcall debouncestart
		rcall delay_long
		rcall debouncestart
		rcall delay_long
		rcall debouncestart

		rjmp timeoutloop

	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Setting Register 16 to 7seg equivalent of what's in R19
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

swapnums: ; Turns R19 val into R16 binary for 7seg
	cpi R19, 0
	breq register16is0
	cpi R19, 1
	breq register16is1
	cpi R19, 0x02
	breq register16is2
	cpi R19, 0x03
	breq register16is3
	cpi R19, 0x04
	breq register16is4
	cpi R19, 0x05
	breq register16is5
	cpi R19, 0x06
	breq register16is6
	cpi R19, 0x07
	breq register16is7
	cpi R19, 0x08
	breq register16is8
	cpi R19, 0x09
	breq register16is9
	cpi R19, 99
	breq register16isEmpty
	ret

register16is0:
	ldi R16, 0b01110111 ; load pattern to display 0 
	ret
register16is1:
	ldi R16, 0b00010100 ; load pattern to display 1
	ret
register16is2:
	ldi R16, 0b11010011 ; load pattern to display 2
	ret
register16is3:
	ldi R16, 0b11010110 ; load pattern to display 3
	ret
register16is4:
	ldi R16, 0b10110100 ; load pattern to display 4
	ret
register16is5:
	ldi R16, 0b11100110 ; load pattern to display 5
	ret
register16is6:
	ldi R16, 0b11100111 ; load pattern to display 6
	ret
register16is7:
	ldi R16, 0b01010100 ; load pattern to display 7
	ret	
register16is8:
	ldi R16, 0b11110111 ; load pattern to display 8
	ret
register16is9:
	ldi R16, 0b11110110 ; load pattern to display 9
	ret

register16isEmpty:
	ldi R16, 0b00000000 ; load pattern to display 9
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Main display function
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

display: ; backup used registers on stack
	
	push R16
	push R17
	in R17, SREG
	push R17
	; ldi R17, 8 ; loop --> test all 8 bits
	ldi R17, 8
	loop:
		rol R16 ; rotate left trough Carry
		BRCS set_ser_in_1 ; branch if Carry is set; put code here to set SER to 0
		cbi PORTB,1
		rjmp end
		set_ser_in_1:
		sbi PORTB,1
		end:
		; srclk pulse
		sbi PORTB,3
		nop
		cbi PORTB,3

		dec R17
	brne loop
	
	; rclk pulse
	sbi PORTB,2
	nop
	cbi PORTB,2

	; restore registers from stack
	pop R17
	out SREG, R17
	pop R17
	pop R16
	ret 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Delay functions
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

delay_long:
	ldi   r26,7    ; r23 <-- Counter for outer loop
	d1: ldi   r24,255     ; r24 <-- Counter for level 2 loop
		d2: ldi   r25,220     ; r25 <-- Counter for inner loop
			d3: dec   r25
				nop               ; no operation
			brne  d3
			dec   r24
		brne  d2
		dec   r26
	brne  d1
	ret

delay_short: ;Makes a smaller delay for bounce checking
	ldi   r26,1
	d4: ldi   r24,40     
		d5: ldi   r25,10    
			d6: dec   r25
				nop             
			brne  d6
			dec   r24
		brne  d5
		dec   r26
	brne  d4
	ret

.exit

